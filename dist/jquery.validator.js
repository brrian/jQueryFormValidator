// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var $,
    slice = [].slice;

  $ = jQuery;

  $.fn.validate = function(customValidation) {
    var errorBag, getInputValue, hasErrors, validationFunctions;
    if (customValidation == null) {
      customValidation = {};
    }
    hasErrors = false;
    errorBag = {};
    validationFunctions = {
      required: function(value) {
        switch (typeof value) {
          case 'string':
            return value.length !== 0;
          case 'boolean':
            return value;
        }
      },
      requiredUnique: function(value, target) {
        var hasFilledInput, isUnique;
        hasFilledInput = false;
        isUnique = true;
        $(target).each((function(_this) {
          return function(index, element) {
            var targetInput, targetValue;
            targetInput = $(element);
            targetValue = getInputValue(targetInput);
            if (_this.required(targetValue) === true) {
              if (hasFilledInput === false) {
                return hasFilledInput = true;
              } else {
                return isUnique = false;
              }
            }
          };
        })(this));
        if (isUnique === false) {
          return false;
        } else {
          return hasFilledInput;
        }
      },
      requiredScopedUnique: function(value, target, scope, input) {
        var hasFilledInput, isUnique;
        hasFilledInput = false;
        isUnique = true;
        input.parents(scope).find(target).each((function(_this) {
          return function(index, element) {
            var targetInput, targetValue;
            targetInput = $(element);
            targetValue = getInputValue(targetInput);
            if (_this.required(targetValue) === true) {
              if (hasFilledInput === false) {
                return hasFilledInput = true;
              } else {
                return isUnique = false;
              }
            }
          };
        })(this));
        if (isUnique === false) {
          return false;
        } else {
          return hasFilledInput;
        }
      },
      requiredIfFilled: function(value, target) {
        if (this.required(getInputValue($(target))) === true) {
          return this.required(value);
        }
        return true;
      },
      emptyIfFilled: function(value, target) {
        if (this.required(getInputValue($(target)))) {
          return !this.required(value);
        }
        return true;
      },
      email: function(value) {
        return /^(?:\w+\.?\+?)*\w+@(?:\w+\.)+\w+$/.test(value);
      },
      numeric: function(value) {
        if (value.length) {
          return /^\d+$/.test(value);
        } else {
          return true;
        }
      },
      length: function(value, target) {
        return value.length === parseInt(target, 10);
      },
      minLength: function(value, target) {
        if (value.length) {
          return value.length >= target;
        } else {
          return true;
        }
      },
      maxLength: function(value, target) {
        if (value.length) {
          return value.length <= target;
        } else {
          return true;
        }
      },
      twId: function(value) {
        return this.length(value, 10) && /[a-zA-Z]{1,2}\d{8,9}/.test(value);
      },
      twPhone: function(value) {
        return this.numeric(value) && this.length(value, 10);
      }
    };
    getInputValue = function(input) {
      var ref;
      if ((ref = input.attr('type')) === 'radio' || ref === 'checkbox') {
        return input.prop('checked');
      } else {
        return input.val();
      }
    };
    $.extend(validationFunctions, customValidation);
    this.find('[data-validation]').each(function(index, element) {
      var args, i, input, len, ref, rule, rules, value;
      input = $(element);
      rules = input.data('validation').split('|');
      if (!(rules.length > 0)) {
        return;
      }
      value = getInputValue(input);
      for (i = 0, len = rules.length; i < len; i++) {
        rule = rules[i];
        ref = rule.split(':'), rule = ref[0], args = 2 <= ref.length ? slice.call(ref, 1) : [];
        args.unshift(value);
        args.push(input);
        if (!validationFunctions.hasOwnProperty(rule)) {
          throw "Validation rule [" + rule + "] does not exist.";
        }
        if ((validationFunctions[rule].apply(validationFunctions, args)) === false) {
          hasErrors = true;
          return errorBag[input.attr('name')] = rule;
        }
      }
    });
    return {
      passed: !hasErrors,
      failed: hasErrors,
      errors: errorBag
    };
  };

}).call(this);

//# sourceMappingURL=jquery.validator.map
